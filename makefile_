NASMPARAM = -f elf -o

NASMBINPARAM = -f bin -o

GCCPARAM = -m32 -nostdlib -nostdinc -fno-pie -fno-builtin -fno-stack-protector \
-nostartfiles  -nodefaultlibs -ffreestanding -c

LDPARAM = -melf_i386 --oformat binary --entry=_start -Ttext=100000
ULDPARAM = -melf_i386 --oformat binary --entry=_main -Ttext=200000

OBJECT = setup.o main.o string.o con.o proc.o scheduler.o v_printf.o kprintf.o queue.o pic.o\
gdt.o idt.o int.o intr.o kbd.o ramdisk.o disk.o ehandler.o io.o syscall.o pit.o kernel.o exit.o\
fork.o chpri.o continu.o sleep.o stop.o wait.o wakeup.o lock.o

O_FBOOT = booter.bin
O_SBOOT = inibtos.bin

BOOT = boot_l

MAIN = main_l

RAMDISK = ramdisk.iso
KERNEL = setup.bin
IMAGE = nadia.img
UTASK = task.bin

build:
		sudo rm -f *.img *.o *.bin
		make all -C ./boot
		make start
		#(killall virtualbox && sleep 1) || true
		#virtualbox --startvm nadia &
		qemu-system-x86_64 -boot a -fda $(IMAGE) ;#-no-fd-bootchk;

%.o:init/%.c
	gcc $(GCCPARAM) $<

%.o:kernel/%.c
	gcc $(GCCPARAM) $<

%.o:kernel/%.asm
	nasm $(NASMPARAM) $@ $<

%.o:lib/%.c
	gcc $(GCCPARAM) $<

%.o:drivers/kbd/%.c
	gcc $(GCCPARAM) $<

%.o:drivers/ramdisk/%.c
	gcc $(GCCPARAM) $<

%.o:boot/setup/%.asm
	nasm $(NASMPARAM) $@ $<

setup.bin: $(OBJECT)
	ld $(LDPARAM) $^ -o $@
task.bin:
	make all -C ./usr
ramdisk.iso:
	#create disk floppy
		mkdosfs -C $@ 144
		mkdosfs -F 12 $@

start:$(RAMDISK) $(KERNEL) $(UTASK)
		#create disk floppy
		mkdosfs -C $(IMAGE) 1440
		mkdosfs -F 12 $(IMAGE)
		sudo losetup /dev/loop0 $(IMAGE)
		sudo mount -t vfat /dev/loop0 /mnt
		sudo cp $(O_SBOOT) $^ /mnt
		sudo umount /mnt
		sudo losetup -d /dev/loop0
		dd if=$(O_FBOOT) of=$(IMAGE) bs=512 count=1 conv=notrunc

